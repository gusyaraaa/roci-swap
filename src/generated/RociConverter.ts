/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace RociConverter {
  export type CategoryStruct = { name: string; price: BigNumberish };

  export type CategoryStructOutput = [name: string, price: bigint] & {
    name: string;
    price: bigint;
  };
}

export interface RociConverterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "categoryName"
      | "categoryPrice"
      | "convert"
      | "enable"
      | "goraToken"
      | "owner"
      | "pendingOwner"
      | "renounceOwnership"
      | "resqueGora"
      | "rociToken"
      | "root"
      | "setCategory"
      | "setWhitelistRoot"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Converted"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "categoryName",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "categoryPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "enable", values: [boolean]): string;
  encodeFunctionData(functionFragment: "goraToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resqueGora",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rociToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCategory",
    values: [BigNumberish, RociConverter.CategoryStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "categoryName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "categoryPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "goraToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resqueGora", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rociToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ConvertedEvent {
  export type InputTuple = [
    sender: AddressLike,
    categoryId: BigNumberish,
    amountRoci: BigNumberish,
    amountGora: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    categoryId: bigint,
    amountRoci: bigint,
    amountGora: bigint
  ];
  export interface OutputObject {
    sender: string;
    categoryId: bigint;
    amountRoci: bigint;
    amountGora: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RociConverter extends BaseContract {
  connect(runner?: ContractRunner | null): RociConverter;
  waitForDeployment(): Promise<this>;

  interface: RociConverterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  categoryName: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  categoryPrice: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  convert: TypedContractMethod<
    [amountRoci: BigNumberish, catId: BigNumberish, _proof: BytesLike[]],
    [void],
    "nonpayable"
  >;

  enable: TypedContractMethod<[set: boolean], [void], "nonpayable">;

  goraToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  resqueGora: TypedContractMethod<[], [void], "nonpayable">;

  rociToken: TypedContractMethod<[], [string], "view">;

  root: TypedContractMethod<[], [string], "view">;

  setCategory: TypedContractMethod<
    [id: BigNumberish, _category: RociConverter.CategoryStruct],
    [void],
    "nonpayable"
  >;

  setWhitelistRoot: TypedContractMethod<
    [_root: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "categoryName"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "categoryPrice"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convert"
  ): TypedContractMethod<
    [amountRoci: BigNumberish, catId: BigNumberish, _proof: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "enable"
  ): TypedContractMethod<[set: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "goraToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resqueGora"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rociToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "root"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setCategory"
  ): TypedContractMethod<
    [id: BigNumberish, _category: RociConverter.CategoryStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelistRoot"
  ): TypedContractMethod<[_root: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Converted"
  ): TypedContractEvent<
    ConvertedEvent.InputTuple,
    ConvertedEvent.OutputTuple,
    ConvertedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "Converted(address,uint8,uint256,uint256)": TypedContractEvent<
      ConvertedEvent.InputTuple,
      ConvertedEvent.OutputTuple,
      ConvertedEvent.OutputObject
    >;
    Converted: TypedContractEvent<
      ConvertedEvent.InputTuple,
      ConvertedEvent.OutputTuple,
      ConvertedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
